openapi: 3.0.0
info:
  title: SyncYomi Server API
  description: SyncYomi Server API
  contact:
    name: Kaiser
    email: kaiserbh@proton.me
    url: https://github.com/flurbudurbur/Shiori
  version: 1.0.0
servers:
  - url: http://localhost:8282/api
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: User login
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: Login successful
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: User logout
      operationId: logoutUser
      responses:
        '204':
          description: Logout successful
        '500':
          description: Internal server error
  /auth/onboard:
    get:
      tags:
        - Authentication
      summary: Check if onboarding is possible
      description: Check if onboarding is possible
      operationId: canOnboard
      responses:
        '204':
          description: Onboarding is possible
        '403':
          description: Onboarding is unavailable
        '500':
          description: Internal server error
    post:
      tags:
        - Authentication
      summary: User onboarding
      description: User onboarding
      operationId: onboardUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: Onboarding successful
        '400':
          description: Bad request
        '403':
          description: Forbidden
        '500':
          description: Internal server error
  /auth/validate:
    get:
      tags:
        - Authentication
      summary: Validate if a user is authenticated
      description: Validate if a user is authenticated
      operationId: validateUser
      responses:
        '204':
          description: User is authenticated
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /config:
    get:
      summary: Get server configuration
      description: Get server configuration
      operationId: getConfig
      tags:
        - Configuration
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigJson'
        default:
          description: Unexpected error
    patch:
      summary: Update server configuration
      description: Update server configuration
      operationId: updateConfig
      tags:
        - Configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdate'
      responses:
        '204':
          description: No Content
        default:
          description: Unexpected error
  /device:
    get:
      summary: Get all devices
      description: Gets all devices
      operationId: listDevices
      tags:
      - Devices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        default:
          description: Unexpected error
    post:
      tags:
        - Devices
      summary: Store a new device
      description: Store a new device
      operationId: storeDevice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '201':
          description: Device created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '500':
          description: Internal server error
  /device/{id}:
    delete:
      summary: Delete an Device
      description: Delete an Device
      operationId: deleteDevice
      tags:
        - Devices
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Device deleted successfully
        '500':
          description: Internal server error
  /healthz/liveness:
    get:
      summary: Get server liveness status
      description: Get server liveness status
      operationId: getLiveness
      tags:
        - Health Check
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK
        default:
          description: Unexpected error
  /healthz/readiness:
    get:
      summary: Get server readiness status
      description: Get server readiness status
      operationId: getReadiness
      tags:
        - Health Check
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: OK
        '500':
          description: Unhealthy. Database unreachable
          content:
            text/plain:
              schema:
                type: string
                example: Unhealthy. Database unreachable
        default:
          description: Unexpected error
  /keys:
    get:
      tags:
        - API Keys
      summary: List all API keys
      description: List all API keys
      operationId: listAPIKeys
      responses:
        '200':
          description: An array of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIKey'
        '500':
          description: Internal server error
    post:
      tags:
        - API Keys
      summary: Store a new API key
      description: Store a new API key
      operationId: storeAPIKey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKey'
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        '500':
          description: Internal server error
  /keys/{apikey}:
    delete:
      tags:
        - API Keys
      summary: Delete an API key
      description: Delete an API key
      operationId: deleteAPIKey
      parameters:
        - name: apikey
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: API key deleted successfully
        '500':
          description: Internal server error
  /logs/files:
    get:
      summary: Get log files
      description: Get log files
      operationId: getLogFiles
      tags:
        - Logs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogfilesResponse'
        default:
          description: Unexpected error

  /logs/files/{logFile}:
    get:
      summary: Download log file
      description: Download log file
      operationId: downloadLogFile
      tags:
        - Logs
      parameters:
        - name: logFile
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        default:
          description: Unexpected error
  /notification:
    get:
      summary: List notifications
      description: List notifications
      operationId: listNotifications
      tags:
        - Notifications
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        default:
          description: Unexpected error
    post:
      summary: Store notification
      description: Store notification
      operationId: storeNotification
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        default:
          description: Unexpected error
  /notification/test:
    post:
      summary: Test notification
      description: Test notification
      operationId: testNotification
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '204':
          description: No Content
        default:
          description: Unexpected error
  /notification/{notificationID}:
    put:
      summary: Update notification
      description: Update notification
      operationId: updateNotification
      tags:
        - Notifications
      parameters:
        - name: notificationID
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        default:
          description: Unexpected error
    delete:
      summary: Delete notification
      description: Delete notification
      operationId: deleteNotification
      tags:
        - Notifications
      parameters:
        - name: notificationID
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        default:
          description: Unexpected error
  /sync:
    post:
      tags:
        - Sync
      summary: Store sync data
      description: Store sync data
      operationId: storeSync
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sync'
      responses:
        '201':
          description: Sync data stored successfully
        '400':
          description: Bad request
        '500':
          description: Internal server error
    get:
      tags:
        - Sync
      summary: List syncs
      description: List syncs
      operationId: listSyncs
      parameters:
        - in: query
          name: apiKey
          schema:
            type: string
          required: true
          description: User's API key
      responses:
        '200':
          description: A list of syncs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sync'
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /sync/{apiKey}:
    get:
      tags:
        - Sync
      summary: Get sync by API key
      description: Get sync by API key
      operationId: getSyncByApiKey
      parameters:
        - in: path
          name: apiKey
          schema:
            type: string
          required: true
          description: User's API key
      responses:
        '200':
          description: Sync data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sync'
        '400':
          description: Bad request
        '404':
          description: Sync not found
        '500':
          description: Internal server error
    delete:
      tags:
        - Sync
      summary: Delete sync data
      description: Delete sync data
      operationId: deleteSync
      parameters:
        - in: path
          name: apiKey
          schema:
            type: integer
          required: true
          description: Sync ID
      responses:
        '204':
          description: Sync data deleted successfully
        '400':
          description: Bad request
        '404':
          description: Sync not found
        '500':
          description: Internal server error
  /sync/device/{id}:
    get:
      tags:
        - Sync
      summary: Get sync by device ID
      description: Get sync by device ID
      operationId: getSyncByDeviceID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Device ID
      responses:
        '200':
          description: Sync data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sync'
        '400':
          description: Bad request
        '404':
          description: Sync not found
        '500':
          description: Internal server error
  /updates/latest:
    get:
      summary: Get the latest release information
      description: Get the latest release information
      operationId: getLatestRelease
      tags:
        - Updates
      responses:
        '200':
          description: Latest release information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
        '204':
          description: No latest release information available
  /updates/check:
    get:
      summary: Check for updates
      description: Check for updates
      operationId: checkUpdates
      tags:
        - Updates
      responses:
        '204':
          description: Check for updates request was successful
tags:
  - name: Authentication
    description: Authentication endpoints
  - name: API Keys
    description: API Key endpoints
  - name: Health Check
    description: Health check endpoints
  - name: Configuration
    description: Configuration endpoints
  - name: Logs
    description: Log endpoints
  - name: Notifications
    description: Notification endpoints
  - name: Updates
    description: Update endpoints
  - name: Devices
    description: Device endpoints
  - name: Sync
    description: Sync endpoints

components:
  schemas:
    APIKey:
      type: object
      properties:
        name:
          type: string
        key:
          type: string
        scopes:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
      required:
        - name
        - key
        - scopes
        - created_at
    Device:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        user_api_key:
          $ref: '#/components/schemas/APIKey'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    ConfigJson:
      type: object
      properties:
        host:
          type: string
        port:
          type: integer
        log_level:
          type: string
        log_path:
          type: string
        log_max_size:
          type: integer
        log_max_backups:
          type: integer
        base_url:
          type: string
        check_for_updates:
          type: boolean
        version:
          type: string
        commit:
          type: string
        date:
          type: string
    ConfigUpdate:
      type: object
      properties:
        check_for_updates:
          type: boolean
        log_level:
          type: string
        log_path:
          type: string
    LogfilesResponse:
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/LogFile'
        count:
          type: integer
    LogFile:
      type: object
      properties:
        filename:
          type: string
        size_bytes:
          type: integer
        size:
          type: string
        updated_at:
          type: string
          format: date-time
    Notification:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
          enum:
            - DISCORD
            - NOTIFIARR
            - IFTTT
            - JOIN
            - MATTERMOST
            - MATRIX
            - PUSH_BULLET
            - PUSHOVER
            - ROCKETCHAT
            - SLACK
            - TELEGRAM
        enabled:
          type: boolean
        events:
          type: array
          items:
            type: string
            enum:
              - SERVER_UPDATE_AVAILABLE
              - SYNC_STARTED
              - SYNC_SUCCESS
              - SYNC_FAILED
              - SYNC_ERROR
              - TEST
        token:
          type: string
        apiKey:
          type: string
        webhook:
          type: string
        title:
          type: string
        icon:
          type: string
        username:
          type: string
        host:
          type: string
        password:
          type: string
        channel:
          type: string
        rooms:
          type: string
        targets:
          type: string
        devices:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Release:
      type: object
      properties:
        tag_name:
          type: string
          description: The tag name of the release
        name:
          type: string
          description: The name of the release
        body:
          type: string
          description: The description of the release
        published_at:
          type: string
          format: date-time
          description: The publication date and time of the release
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
    Asset:
      type: object
      properties:
        name:
          type: string
          description: The name of the asset
        size:
          type: integer
          format: int64
          description: The size of the asset in bytes
        browser_download_url:
          type: string
          description: The download URL for the asset
    Sync:
      type: object
      properties:
        id:
          type: integer
        last_synced:
          type: string
          format: date-time
        status:
          type: string
          enum: [ pending, syncing, success, error ]
        device:
          $ref: '#/components/schemas/Device'
        user_api_key:
          $ref: '#/components/schemas/APIKey'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
